using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace App_Console_LW01
{
    class Program
    {


        static void Main(string[] args)
        {
            //Concatenation de string
            String firstFriend = "Marcel";
            String secondFriend = "Maria";
            Console.WriteLine($"Hello {firstFriend} and {secondFriend}!");  //Reprise des valeurs de chaînes de caractères lors de l'affichage sur la console ;

            //Suppression des espaces au début et en fin de string
            String message = "        Hello world!        ";
            Console.WriteLine(message + "................");
            String messageTrimedStart = message.TrimStart();
            Console.WriteLine(messageTrimedStart + "................");
            String messageTrimedEnd = message.TrimEnd();
            Console.WriteLine(messageTrimedEnd + "..............");

            //Modifier une chaine
            String sayhello = "Greetings from France";
            Console.WriteLine(sayhello);
            //Remplacement d'une chaîne de caractères par une autre ;
            sayhello = sayhello.Replace("Greetings", "Goodafternoon");
            Console.WriteLine(sayhello + " longureur : " + sayhello.Length);
            //Passage de la chaine en majuscules ;
            Console.WriteLine(sayhello.ToUpper());
            //Passage de la chaîne en minuscules ;
            Console.WriteLine(sayhello.ToLower());

            //Recherche dans une chaîne de caractères
            String greetings = "You say goodbye when I say hello!";
            Console.WriteLine(greetings.Contains("goodbye"));
            Console.WriteLine(greetings.Contains("talk"));
            Console.WriteLine(greetings.StartsWith("You"));
            Console.WriteLine(greetings.StartsWith("when"));
            Console.WriteLine(greetings.EndsWith("hello!"));
            Console.WriteLine(greetings.EndsWith("I"));

            //Vérification du typage numérique : intéger ;
            int max = int.MaxValue;
            int min = int.MinValue;
            Console.WriteLine(max);
            Console.WriteLine(min);
            int overflow = max + 3;
            Console.WriteLine(overflow);

            //Vérification du typage numérique : decimaux ;
            decimal maxDcml = decimal.MaxValue;
            decimal minDcml = decimal.MinValue;
            Console.WriteLine(maxDcml);
            Console.WriteLine(minDcml);
            decimal a = 4.0M;
            decimal b = 5.0M;
            Console.WriteLine(a / b);

            //Boucles et conditions : Somme des nombre de 1 à 20 divisibles par 3
            double res = 0;
            for (int k = 0; k <= 20; k++)
            {
                if (k % 3 == 0)
                {
                    res += k;
                }
            }
            Console.WriteLine($"Resultat : {res}\n\n");

            ///////////////////////////////////////////////////////////////////////Tests de Class/////////////////////////////////////////////////////////////////////////////

            //Test de class : type ref
            //Nouvelle instance ;
            Console.WriteLine("////////////TEST CLASS////////////");
            Person man = new Person();
            Console.WriteLine("Nouvelle Instance de Person 'man' :\no Name : " + man.getName() + ";\no Height : " + man.getHeight() + ";\no Weight : " + man.getWeight() + ";");
            //Remplissage de l'instance;
            man.setName("Max");
            man.setHeight(1.70);
            man.setWeight(75);
            Console.WriteLine("Instance n°1 de Person 'man' :\no Name : " + man.getName() + ";\no Height : " + man.getHeight() + ";\no Weight : " + man.getWeight() + ";");
            //Création d'une nouvelle variable de l'instance;
            Person woman = man;
            woman.setName("Charline");
            woman.setHeight(1.80);
            woman.setWeight(70);
            //Les modifications faites sur l'une se répercutent sur l'autre;
            Console.WriteLine("Instance n°2 de Person 'woman' :\no Name : " + woman.getName() + ";\no Height : " + woman.getHeight() + ";\no Weight : " + woman.getWeight() + ";");
            Console.WriteLine("Instance n°1 de Person 'man' :\no Name : " + man.getName() + ";\no Height : " + man.getHeight() + ";\no Weight : " + man.getWeight() + ";\n\n");

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            /////////////////////////////////////////////////////////////////////Tests de Struct//////////////////////////////////////////////////////////////////////////////

            //Test de struct : type valeur
            //Nouvelle instance ;
            Console.WriteLine("////////////////TEST STRUCT///////////////");
            Animal pet = new Animal("Shadow", "Dog", 3, 0);
            Console.WriteLine("Nouvelle Instance de Animal 'pet' :\no Name : " + pet.getName() + ";\no Species : " + pet.getSpecies() + ";\no Age : " + pet.getAge() + ";");
            //Copie de l'instance ;
            Animal savage = pet;
            Console.WriteLine("Nouvelle Instance de Animal 'savage' :\no Name : " + savage.getName() + ";\no Species : " + savage.getSpecies() + ";\no Age : " + savage.getAge() + ";");
            //Changement des champs ;
            savage.setName("Lightning");
            savage.setSpecies("Unicorn");
            savage.setAge(7);
            Console.WriteLine("Nouvelle Instance de Animal 'pet' :\no Name : " + pet.getName() + ";\no Species : " + pet.getSpecies() + ";\no Age : " + pet.getAge() + ";");
            Console.WriteLine("Nouvelle Instance de Animal 'savage' :\no Name : " + savage.getName() + ";\no Species : " + savage.getSpecies() + ";\no Age : " + savage.getAge() + ";\n\n");

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            /////////////////////////////////////////////////////////////////////Tests Interface//////////////////////////////////////////////////////////////////////////////

            //Test interface : IMove
            Console.WriteLine("///////////TEST INTERFACE//////////");
            Console.WriteLine(pet.getName() + " has done " + pet.getSteps() + " steps. He has moved : " + pet.hasMoved() + " ;");
            pet.moveArround(6);
            Console.WriteLine(pet.getName() + " has done " + pet.getSteps() + " steps. He has moved : " + pet.hasMoved() + " ;");

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            /////////////////////////////////////////////////////////////////////Tests Enum///////////////////////////////////////////////////////////////////////////////////

            //Création des liste d'énumération ;
            int xRider = (int)ApocalypseRiders.War;
            int xMusketeers = (int)Musketeers.Athos;
            int yRider = (int)ApocalypseRiders.Death;
            int yMusketeers = (int)Musketeers.DArtagnan;
            Console.WriteLine("Death possède l'ID : " + yRider + " de la liste des cavaliers commençant par War d'ID : " + xRider + ".\nDArtagnan possède l'ID : " + yMusketeers + " de celle des mousquetaires commençant par Athos d'ID : " + xMusketeers + ".");

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            /////////////////////////////////////////////////////////////////////Tests Délégués////////////////////////////////////////////////////////////////////////////////

            Console.WriteLine("\n\n//////////////////////Test Délégués/////////////////////");
            //Instanciation de la méthode à déléguer;
            CalculMethode handler = methodDelegue;
            //Vérification de l'utilisation de celle-ci;
            Console.WriteLine("x = 5 et y = 3, alors la méthode déléguée renvoie : "+handler(5, 3)+" puisque celle-ci fait (x+y)*y.");
            //Appel de la fonction avec la méthode déléguée en paramètre;
            methodeAppel(handler, 4, 2);
            //Instanciation d'une méthode anonyme;
            CalculMethode newMethode = delegate (int x, int y) { return (x * (y + y * x)); };
            //Appel du délégué de la méthode anonyme;
            Console.WriteLine("La méthode effectue l'opération x*(y+y*x) avec x = 2 et y = 1. le résultat vaut : "+newMethode(2, 1)+".");

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            /////////////////////////////////////////////////////////////////////////Tests Tableaux///////////////////////////////////////////////////////////////////////////

            Console.WriteLine("\n\n//////////////////////Test Tableaux/////////////////////");
            Console.WriteLine("Tableau unidimentionnel :");
            //Instanciation d'un tableau unidimensionnel de Strings;
            String[] learners = new String[] { "Maxime", "Louis","Elisa","Chloé"};
            //Parcours du tableau de Strings et affichage des valeurs;
            for(int inc=0; inc<learners.Length; inc++)
            {
                Console.Write("\tPersonne n°"+(inc+1)+" : "+learners[inc]+";\n");
            }

            Console.WriteLine("\n\nTableau bidimentionnel :");
            //Instanciation d'un tableau bidimensionnel d'Intégers;
            int[,] table = new int[,] { { 3,4,5 },{ 2,3,7 },{ 9,9,0 } };
            //Détermination de la longueur du tableau;
            Console.WriteLine("Lenght of the table : "+table.Length+"\n");
            //Compteur du nombre de cases;
            int counter = 1;
            //Parcours de toutes les cases du tableau;
            foreach(int i in table)
            {
                Console.Write("\tCase n°" + counter + " : " + i + ";\n");
                //Incrémentation du compteur;
                counter++;
            }

            Console.WriteLine("\nTableau bidimentionnel en escalier :");
            //Intanciation d'un tableau bidimensionnel en escalier d'Integers;
            int[][] table_2 = new int[][]
                {
                    new int[] {3,3,3},
                    new int[] {5,5,5,5,5,5},
                    new int[] {9,9}
                };

            for(int inc_1=0; inc_1<table_2.Length; inc_1++)
            {
                for(int inc_2=0;inc_2<table_2[inc_1].Length;inc_2++)
                {
                    Console.WriteLine("La case [" + inc_1 + "] [" + inc_2 + "] correspond à la valeur de : " + table_2[inc_1][inc_2] + ".");
                }
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            ////////////////////////////////////////////////////////////////////////Tests Chaînes/////////////////////////////////////////////////////////////////////////////

            Console.WriteLine("\n\n/////////////////Tests Chaines/////////////////////");
            //Création d'une chaine de caractères;
            String newMessage = "Hello World";
            //Affichage de la chaine;
            Console.WriteLine(newMessage);

            //Creation d'une nouvelle chaine de caractères;
            String message_1 = "***";
            //Affichage du contenu de la chaine;
            Console.WriteLine(message_1);
            //Remplissage de la chaine;
            message_1 += "Aller hop!";
            //Nouvel affichage du contenu de la chaine;
            Console.WriteLine(message_1);

            //Création d'une liste de Char;
            Char[] test = { 'S', 'O', 'S' };
            //Inclusion de la liste dans une chaine;
            String message_2 = new string(test);
            //Affichage de la chaine;
            Console.WriteLine(message_2);

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //////////////////////////////////////////////////////////////////////////Tests StringBuilders/////////////////////////////////////////////////////////////////////

            Console.WriteLine("\n\n///////////////////Tests StringBuilder///////////////////");
            //Initialisation d'une chaine de caractère à entrer dans un StringBuilder;
            String texte = "Cette chaîne est modifiable grace à son type StringBuilder!";
            System.Text.StringBuilder sb = new System.Text.StringBuilder(texte);
            //Parcours du StringBuilder pour en modifier le contenu;
            for(int inc=0;inc<sb.Length;inc++)
            {
                if (inc!=0 && System.Char.IsLower(sb[inc])==true && sb[inc - 1].CompareTo(' ')==0)
                {
                    //Remplace toute les lettres de départ des mots par des majuscules;
                    sb[inc]=System.Char.ToUpper(sb[inc]);
                }
            }
            //Affiche le nouveau contenu du StringBuilder;
            Console.WriteLine(sb.ToString());
            //Modification d'un caractère ciblé;
            sb[0] = 'F';
            //Remplacement d'une chaine ciblée par une autre;
            sb.Replace("Modifiable", "Mutable");
            //Effacement d'un caractère dans le StringBuilder;
            String textToRemove = "!";
            sb.Remove(sb.ToString().IndexOf(textToRemove),textToRemove.Length);
            //Insertion d'une nouvelle chaine dans le StringBuilder;
            sb.Insert(sb.Length, "...");
            //Affichage de la nouvelle chaine;
            Console.WriteLine(sb.ToString());

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //////////////////////////////////////////////////////////////////////////Tests Requetes LINQ//////////////////////////////////////////////////////////////////////

            Console.WriteLine("\n\n/////////////////Tests LINQ Queries/////////////////////");
            //Instanciation des expression de requtes;
            LINQQueryExpressions instance = new LINQQueryExpressions();
            //Application de la méthode de requetes;
            Boolean done = instance.newQuery();

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            ////////////////////////////////////////////////////////////////////////Tests Instructions Lambda/////////////////////////////////////////////////////////////////

            /*TestDelegate del = n => {
                string s = n + " Fields.";
                Console.WriteLine(s); };*/

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Temps de pause pour apperçu des résultats
            //System.Threading.Thread.Sleep(10000);

            //Permet de garder la fenêtre du shell ouverte durant la phase de debugage;
            Console.WriteLine(System.Environment.NewLine);
            Console.WriteLine("--- Press any key to quit the window ---");
            Console.ReadKey();

        }

        /*
         * Délégué permettant de passer des fonctions en paramètres d'autres fonctions;
         * Doivent retourner le même type de variable que la fonction représentée par le délégué;
         */
        public delegate double CalculMethode(int x, int y);
        public delegate void TestDelegate(string s);

        /**
         * Fonction déléguée grâce à l'appel de variable précédent;
         */
        public static double methodDelegue (int x, int y)
        {
            return ((x + y) * y);
        }


        /**
         * Fonction d'appel de la fonction déléguée prise en paramètre;
         */
        public static void methodeAppel (CalculMethode methodeDel, int x, int y)
        {
            Console.WriteLine("Nouveau résultat : x = " + x + ", y = " + y + ", résultat de la fonction déléguée : " + methodeDel(x, y));
        }

    }


    /**
     * Nouvelle class : type par référence ;
     */
    public class Person
    {
        //Initialisation des Champs de la class Person ;
        private String name;
        private double height;
        private double weight;

        /**
         * Constructeur neutre;
         */
        public Person()
        {
            this.name = "Nobody";
            this.height = 1.50;
            this.weight = 95;
        }


        /**
         * Constructeur plein;
         */
        public Person(String name, double height, double weight)
        {
            this.name = name;
            this.height = height;
            this.weight = weight;
        }

        /**
         * Getter et setter de la class;
         */
        public String getName()
        {
            return (this.name);
        }

        public double getHeight()
        {
            return (this.height);
        }

        public double getWeight()
        {
            return (this.weight);
        }

        public void setName(String newName)
        {
            this.name = newName;
        }

        public void setHeight(double newHeight)
        {
            this.height = newHeight;
        }

        public void setWeight(double newWeight)
        {
            this.weight = newWeight;
        }
    }


    /**
     * Classe de requetes de bases de données;
     */
    class LINQQueryExpressions
    {
        public Boolean newQuery()
        {
            int[] table = new int[] { 9,5,9,0,0,9,9,9,2 };

            //Query syntax
            IEnumerable<int> tableQuery_1 = from square in table
                                          where square < 8
                                          select square;

            //Method syntax : utilisation d'expressions lambda;
            IEnumerable<int> tableQuery_2 = table.Where(num => num % 5 == 0).OrderBy(n => n);

            //Affichage de la première requete;
            Console.WriteLine("\nPremière Requete");
            foreach(int i in tableQuery_1)
            {
                Console.WriteLine(i + " ");
            }

            //Affichage de la deuxième requete;
            Console.WriteLine("\nDeuxième Requete");
            foreach(int i in tableQuery_2)
            {
                Console.WriteLine(i + " ");
            }
            return (true);
        }
    }

        /**
         * Classes énnumération;
         */
        enum Musketeers : int { Athos, Porthos, Aramis, DArtagnan };
        enum ApocalypseRiders : long { War=2, Hunger, Conquest, Death };


    /**
     * Nouvelle class : type par référence ;
     */
    public struct Animal : IMove<Animal>
    {
        //Initialisation des Champs de la struct Animal ;
        private String name;
        private String species;
        private int age;
        private int steps;


        /**
         * Constructeur plein;
         */
        public Animal(String name, String species, int age, int steps)
        {
            this.name = name;
            this.species = species;
            this.age = age;
            this.steps = steps;
        }

        /**
         * Getter et setter de la class;
         */
        public String getName()
        {
            return (this.name);
        }

        public String getSpecies()
        {
            return (this.species);
        }

        public int getAge()
        {
            return (this.age);
        }

        public int getSteps()
        {
            return (this.steps);
        }

        public void setName(String newName)
        {
            this.name = newName;
        }

        public void setSpecies(String newSpecies)
        {
            this.species = newSpecies;
        }

        public void setAge(int newAge)
        {
            this.age = newAge;
        }


        /**
         * Methodes de l'Interface : IMove
         * Ajoute un nombre de pas à l'instance animal;
         */
        public void moveArround(int nbSteps)
        {
            this.steps += nbSteps;
            Console.WriteLine(this.getName() + ", the " + this.getSpecies() + ", has moved of " + nbSteps + " steps.");
        }


        /**
         * Renvoie un booleen sur l'état de mouvement de l'instance Animal;
         */
        public bool hasMoved()
        {
            if(this.steps!=0)
            {
                return (true);
            }
            else
            {
                return (false);
            }
        }
    }

    /**
     * Interface implémentée par la struct Animal ;
     * Permet de produire des héritages pour les structure qui ne le font pas naturellement ;
     * Permet de donner des héritages multiples aux class ;
     */
    public interface IMove<T>
    {
        void moveArround(int nbSteps);
        bool hasMoved();
    }
}
